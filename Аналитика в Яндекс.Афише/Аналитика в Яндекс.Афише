{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Аналитика в Яндекс Афише"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Необходимо помочь маркетологам оптимизировать маркетинговые затраты.  \n",
    "\n",
    "В распоряжении есть данные от Яндекс.Афиши с июня 2017 по конец мая 2018 года:  \n",
    "* лог сервера с данными о посещениях сайта Яндекс.Афиши,  \n",
    "* выгрузка всех заказов за этот период,  \n",
    "* статистика рекламных расходов.  \n",
    "\n",
    "Мы изучим:  \n",
    "* как люди пользуются продуктом,  \n",
    "* когда они начинают покупать,  \n",
    "* сколько денег приносит каждый клиент,  \n",
    "* когда клиент окупается."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Описание данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Таблица visits (лог сервера с информацией о посещениях сайта):\n",
    "- Uid — уникальный идентификатор пользователя;  \n",
    "- Device — категория устройства пользователя;  \n",
    "- Start Ts — дата и время начала сессии;  \n",
    "- End Ts — дата и время окончания сессии;  \n",
    "- Source Id — идентификатор рекламного источника, из которого пришел пользователь.  \n",
    "#### Таблица orders (информация о заказах):  \n",
    "- Uid — уникальный id пользователя, который сделал заказ;  \n",
    "- Buy Ts — дата и время заказа;  \n",
    "- Revenue — выручка Яндекс.Афиши с этого заказа;  \n",
    "#### Таблица costs (информация о затратах на маркетинг):  \n",
    "- source_id — идентификатор рекламного источника;  \n",
    "- dt — дата;  \n",
    "- costs — затраты на этот рекламный источник в этот день"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### План выполнения:  \n",
    "Шаг 1. Загрузим данные и подготовим их к анализу;  \n",
    "Шаг 2. Построим отчеты и посчитаем метрики;  \n",
    "Шаг 3. Напишем вывод: порекомендуем маркетологам, куда и сколько им стоит вкладывать денег."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 1. Загрузим данные и подготовим их к анализу."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "visits = pd.read_csv('/datasets/visits_log.csv')\n",
    "orders = pd.read_csv('/datasets/orders_log.csv')\n",
    "costs = pd.read_csv('/datasets/costs.csv')\n",
    "#visits = pd.read_csv('visits_log.csv')\n",
    "#orders = pd.read_csv('orders_log.csv')\n",
    "#costs = pd.read_csv('costs.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Изучим данные в файлах и проверим типы данных на корректность. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Device</th>\n",
       "      <th>End Ts</th>\n",
       "      <th>Source Id</th>\n",
       "      <th>Start Ts</th>\n",
       "      <th>Uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-12-20 17:38:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2017-12-20 17:20:00</td>\n",
       "      <td>16879256277535980062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-02-19 17:21:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-19 16:53:00</td>\n",
       "      <td>104060357244891740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>5</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>7459035603376831527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-05-20 11:23:00</td>\n",
       "      <td>9</td>\n",
       "      <td>2018-05-20 10:59:00</td>\n",
       "      <td>16174680259334210214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2017-12-27 14:06:00</td>\n",
       "      <td>3</td>\n",
       "      <td>2017-12-27 14:06:00</td>\n",
       "      <td>9969694820036681168</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Device               End Ts  Source Id             Start Ts  \\\n",
       "0    touch  2017-12-20 17:38:00          4  2017-12-20 17:20:00   \n",
       "1  desktop  2018-02-19 17:21:00          2  2018-02-19 16:53:00   \n",
       "2    touch  2017-07-01 01:54:00          5  2017-07-01 01:54:00   \n",
       "3  desktop  2018-05-20 11:23:00          9  2018-05-20 10:59:00   \n",
       "4  desktop  2017-12-27 14:06:00          3  2017-12-27 14:06:00   \n",
       "\n",
       "                    Uid  \n",
       "0  16879256277535980062  \n",
       "1    104060357244891740  \n",
       "2   7459035603376831527  \n",
       "3  16174680259334210214  \n",
       "4   9969694820036681168  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "visits.columns = ['device', 'end_ts', 'source_id', 'start_ts', 'uid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 359400 entries, 0 to 359399\n",
      "Data columns (total 5 columns):\n",
      " #   Column     Non-Null Count   Dtype \n",
      "---  ------     --------------   ----- \n",
      " 0   device     359400 non-null  object\n",
      " 1   end_ts     359400 non-null  object\n",
      " 2   source_id  359400 non-null  int64 \n",
      " 3   start_ts   359400 non-null  object\n",
      " 4   uid        359400 non-null  uint64\n",
      "dtypes: int64(1), object(3), uint64(1)\n",
      "memory usage: 13.7+ MB\n"
     ]
    }
   ],
   "source": [
    "visits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В файле visits нет пропусков данных. Тип данных показателей End Ts и Start Ts необходимо изменить на datetime. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "visits['end_ts'] = pd.to_datetime(visits['end_ts'])\n",
    "visits['start_ts'] = pd.to_datetime(visits['start_ts'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 359400 entries, 0 to 359399\n",
      "Data columns (total 5 columns):\n",
      " #   Column     Non-Null Count   Dtype         \n",
      "---  ------     --------------   -----         \n",
      " 0   device     359400 non-null  object        \n",
      " 1   end_ts     359400 non-null  datetime64[ns]\n",
      " 2   source_id  359400 non-null  int64         \n",
      " 3   start_ts   359400 non-null  datetime64[ns]\n",
      " 4   uid        359400 non-null  uint64        \n",
      "dtypes: datetime64[ns](2), int64(1), object(1), uint64(1)\n",
      "memory usage: 13.7+ MB\n"
     ]
    }
   ],
   "source": [
    "visits.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Buy Ts</th>\n",
       "      <th>Revenue</th>\n",
       "      <th>Uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-01 00:10:00</td>\n",
       "      <td>17.00</td>\n",
       "      <td>10329302124590727494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-01 00:25:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>11627257723692907447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-01 00:27:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>17903680561304213844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-01 00:29:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>16109239769442553005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-01 07:58:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>14200605875248379450</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Buy Ts  Revenue                   Uid\n",
       "0  2017-06-01 00:10:00    17.00  10329302124590727494\n",
       "1  2017-06-01 00:25:00     0.55  11627257723692907447\n",
       "2  2017-06-01 00:27:00     0.37  17903680561304213844\n",
       "3  2017-06-01 00:29:00     0.55  16109239769442553005\n",
       "4  2017-06-01 07:58:00     0.37  14200605875248379450"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "orders.columns = ['buy_ts', 'revenue', 'uid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50415 entries, 0 to 50414\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   buy_ts   50415 non-null  object \n",
      " 1   revenue  50415 non-null  float64\n",
      " 2   uid      50415 non-null  uint64 \n",
      "dtypes: float64(1), object(1), uint64(1)\n",
      "memory usage: 1.2+ MB\n"
     ]
    }
   ],
   "source": [
    "orders.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В файле orders нет пропусков данных. Тип данных показателей Buy Ts необходимо изменить на datetime. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50415 entries, 0 to 50414\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype         \n",
      "---  ------   --------------  -----         \n",
      " 0   buy_ts   50415 non-null  datetime64[ns]\n",
      " 1   revenue  50415 non-null  float64       \n",
      " 2   uid      50415 non-null  uint64        \n",
      "dtypes: datetime64[ns](1), float64(1), uint64(1)\n",
      "memory usage: 1.2 MB\n"
     ]
    }
   ],
   "source": [
    "orders['buy_ts'] = pd.to_datetime(orders['buy_ts'])\n",
    "orders.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_ts</th>\n",
       "      <th>revenue</th>\n",
       "      <th>uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-01 00:10:00</td>\n",
       "      <td>17.00</td>\n",
       "      <td>10329302124590727494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-01 00:25:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>11627257723692907447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-01 00:27:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>17903680561304213844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-01 00:29:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>16109239769442553005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-01 07:58:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>14200605875248379450</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               buy_ts  revenue                   uid\n",
       "0 2017-06-01 00:10:00    17.00  10329302124590727494\n",
       "1 2017-06-01 00:25:00     0.55  11627257723692907447\n",
       "2 2017-06-01 00:27:00     0.37  17903680561304213844\n",
       "3 2017-06-01 00:29:00     0.55  16109239769442553005\n",
       "4 2017-06-01 07:58:00     0.37  14200605875248379450"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>dt</th>\n",
       "      <th>costs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>75.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-02</td>\n",
       "      <td>62.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-03</td>\n",
       "      <td>36.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-04</td>\n",
       "      <td>55.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-05</td>\n",
       "      <td>57.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id          dt  costs\n",
       "0          1  2017-06-01  75.20\n",
       "1          1  2017-06-02  62.25\n",
       "2          1  2017-06-03  36.53\n",
       "3          1  2017-06-04  55.00\n",
       "4          1  2017-06-05  57.08"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2542 entries, 0 to 2541\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   source_id  2542 non-null   int64  \n",
      " 1   dt         2542 non-null   object \n",
      " 2   costs      2542 non-null   float64\n",
      "dtypes: float64(1), int64(1), object(1)\n",
      "memory usage: 59.7+ KB\n"
     ]
    }
   ],
   "source": [
    "costs.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В файле orders нет пропусков данных. Тип данных показателей dt необходимо изменить на datetime. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2542 entries, 0 to 2541\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count  Dtype         \n",
      "---  ------     --------------  -----         \n",
      " 0   source_id  2542 non-null   int64         \n",
      " 1   dt         2542 non-null   datetime64[ns]\n",
      " 2   costs      2542 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1)\n",
      "memory usage: 59.7 KB\n"
     ]
    }
   ],
   "source": [
    "costs['dt'] = costs['dt'].astype('datetime64[ns]')\n",
    "costs.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 2. Построим отчеты и посчитаем метрики."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Продукт.\n",
    "#### 1. Сколько людей пользуются в день, неделю, месяц?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "visits['session_year']  = visits['start_ts'].dt.year\n",
    "visits['session_month'] = visits['start_ts'].dt.month\n",
    "visits['session_week']  = visits['start_ts'].dt.week\n",
    "visits['session_date'] = visits['start_ts'].dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>device</th>\n",
       "      <th>end_ts</th>\n",
       "      <th>source_id</th>\n",
       "      <th>start_ts</th>\n",
       "      <th>uid</th>\n",
       "      <th>session_year</th>\n",
       "      <th>session_month</th>\n",
       "      <th>session_week</th>\n",
       "      <th>session_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-12-20 17:38:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2017-12-20 17:20:00</td>\n",
       "      <td>16879256277535980062</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>51</td>\n",
       "      <td>2017-12-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-02-19 17:21:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-19 16:53:00</td>\n",
       "      <td>104060357244891740</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>2018-02-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>5</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>7459035603376831527</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>26</td>\n",
       "      <td>2017-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-05-20 11:23:00</td>\n",
       "      <td>9</td>\n",
       "      <td>2018-05-20 10:59:00</td>\n",
       "      <td>16174680259334210214</td>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>2018-05-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2017-12-27 14:06:00</td>\n",
       "      <td>3</td>\n",
       "      <td>2017-12-27 14:06:00</td>\n",
       "      <td>9969694820036681168</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>52</td>\n",
       "      <td>2017-12-27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    device              end_ts  source_id            start_ts  \\\n",
       "0    touch 2017-12-20 17:38:00          4 2017-12-20 17:20:00   \n",
       "1  desktop 2018-02-19 17:21:00          2 2018-02-19 16:53:00   \n",
       "2    touch 2017-07-01 01:54:00          5 2017-07-01 01:54:00   \n",
       "3  desktop 2018-05-20 11:23:00          9 2018-05-20 10:59:00   \n",
       "4  desktop 2017-12-27 14:06:00          3 2017-12-27 14:06:00   \n",
       "\n",
       "                    uid  session_year  session_month  session_week  \\\n",
       "0  16879256277535980062          2017             12            51   \n",
       "1    104060357244891740          2018              2             8   \n",
       "2   7459035603376831527          2017              7            26   \n",
       "3  16174680259334210214          2018              5            20   \n",
       "4   9969694820036681168          2017             12            52   \n",
       "\n",
       "  session_date  \n",
       "0   2017-12-20  \n",
       "1   2018-02-19  \n",
       "2   2017-07-01  \n",
       "3   2018-05-20  \n",
       "4   2017-12-27  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "907\n",
      "5825\n",
      "23228\n"
     ]
    }
   ],
   "source": [
    "dau_total = visits.groupby('session_date').agg({'uid': 'nunique'}).mean()\n",
    "wau_total = visits.groupby(['session_week']).agg({'uid': 'nunique'}).mean()\n",
    "mau_total = visits.groupby(['session_month']).agg({'uid': 'nunique'}).mean()\n",
    "\n",
    "print(int(dau_total))\n",
    "print(int(wau_total)) \n",
    "print(int(mau_total)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dau_total_ax = visits.groupby('session_date').agg({'uid': 'nunique'}).plot(figsize = (10,6))\n",
    "plt.title('Использование по дням')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wau_total_ax = visits.groupby('session_week').agg({'uid': 'nunique'}).plot(figsize = (10,6))\n",
    "plt.title('Использование по неделям')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mau_total_ax = visits.groupby('session_month').agg({'uid': 'nunique'}).plot(figsize = (10,6))\n",
    "plt.title('Использование по месяцам')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Сколько сессий в день?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "uid    987.362637\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "session_count = visits.groupby('session_date').agg({'uid': 'count'}).mean()\n",
    "print(session_count)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В день в среднем 987 сессий. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Сколько длится одна сессия?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "643.506488592098\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d5f0d90d08>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visits['session_duration_sec'] = (visits['end_ts'] - visits['start_ts']).dt.seconds\n",
    "print(visits['session_duration_sec'].mean()) \n",
    "visits.query('session_duration_sec<2000')['session_duration_sec'].hist(bins=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Как часто люди возвращаются?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>first_visit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11863502262781</td>\n",
       "      <td>2018-03-01 17:27:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49537067089222</td>\n",
       "      <td>2018-02-06 15:55:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>297729379853735</td>\n",
       "      <td>2017-06-07 18:47:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>313578113262317</td>\n",
       "      <td>2017-09-18 22:49:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>325320750514679</td>\n",
       "      <td>2017-09-30 14:29:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               uid         first_visit\n",
       "0   11863502262781 2018-03-01 17:27:00\n",
       "1   49537067089222 2018-02-06 15:55:00\n",
       "2  297729379853735 2017-06-07 18:47:00\n",
       "3  313578113262317 2017-09-18 22:49:00\n",
       "4  325320750514679 2017-09-30 14:29:00"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_visit = visits.groupby(['uid'])['start_ts'].min().reset_index()\n",
    "first_visit.columns = ['uid', 'first_visit']\n",
    "first_visit.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>device</th>\n",
       "      <th>end_ts</th>\n",
       "      <th>source_id</th>\n",
       "      <th>start_ts</th>\n",
       "      <th>uid</th>\n",
       "      <th>session_year</th>\n",
       "      <th>session_month</th>\n",
       "      <th>session_week</th>\n",
       "      <th>session_date</th>\n",
       "      <th>session_duration_sec</th>\n",
       "      <th>first_visit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-12-20 17:38:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2017-12-20 17:20:00</td>\n",
       "      <td>16879256277535980062</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>51</td>\n",
       "      <td>2017-12-20</td>\n",
       "      <td>1080</td>\n",
       "      <td>2017-12-20 17:20:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-02-19 17:21:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-19 16:53:00</td>\n",
       "      <td>104060357244891740</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>2018-02-19</td>\n",
       "      <td>1680</td>\n",
       "      <td>2018-02-19 16:53:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>5</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>7459035603376831527</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>26</td>\n",
       "      <td>2017-07-01</td>\n",
       "      <td>0</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-05-20 11:23:00</td>\n",
       "      <td>9</td>\n",
       "      <td>2018-05-20 10:59:00</td>\n",
       "      <td>16174680259334210214</td>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>1440</td>\n",
       "      <td>2018-03-09 20:05:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-03-09 20:33:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2018-03-09 20:05:00</td>\n",
       "      <td>16174680259334210214</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>2018-03-09</td>\n",
       "      <td>1680</td>\n",
       "      <td>2018-03-09 20:05:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    device              end_ts  source_id            start_ts  \\\n",
       "0    touch 2017-12-20 17:38:00          4 2017-12-20 17:20:00   \n",
       "1  desktop 2018-02-19 17:21:00          2 2018-02-19 16:53:00   \n",
       "2    touch 2017-07-01 01:54:00          5 2017-07-01 01:54:00   \n",
       "3  desktop 2018-05-20 11:23:00          9 2018-05-20 10:59:00   \n",
       "4  desktop 2018-03-09 20:33:00          4 2018-03-09 20:05:00   \n",
       "\n",
       "                    uid  session_year  session_month  session_week  \\\n",
       "0  16879256277535980062          2017             12            51   \n",
       "1    104060357244891740          2018              2             8   \n",
       "2   7459035603376831527          2017              7            26   \n",
       "3  16174680259334210214          2018              5            20   \n",
       "4  16174680259334210214          2018              3            10   \n",
       "\n",
       "  session_date  session_duration_sec         first_visit  \n",
       "0   2017-12-20                  1080 2017-12-20 17:20:00  \n",
       "1   2018-02-19                  1680 2018-02-19 16:53:00  \n",
       "2   2017-07-01                     0 2017-07-01 01:54:00  \n",
       "3   2018-05-20                  1440 2018-03-09 20:05:00  \n",
       "4   2018-03-09                  1680 2018-03-09 20:05:00  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visits = visits.merge(first_visit)\n",
    "visits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>device</th>\n",
       "      <th>end_ts</th>\n",
       "      <th>source_id</th>\n",
       "      <th>start_ts</th>\n",
       "      <th>uid</th>\n",
       "      <th>session_year</th>\n",
       "      <th>session_month</th>\n",
       "      <th>session_week</th>\n",
       "      <th>session_date</th>\n",
       "      <th>session_duration_sec</th>\n",
       "      <th>first_visit</th>\n",
       "      <th>first_visit_month</th>\n",
       "      <th>visit_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-12-20 17:38:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2017-12-20 17:20:00</td>\n",
       "      <td>16879256277535980062</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>51</td>\n",
       "      <td>2017-12-20</td>\n",
       "      <td>1080</td>\n",
       "      <td>2017-12-20 17:20:00</td>\n",
       "      <td>2017-12-01</td>\n",
       "      <td>2017-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-02-19 17:21:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-19 16:53:00</td>\n",
       "      <td>104060357244891740</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>2018-02-19</td>\n",
       "      <td>1680</td>\n",
       "      <td>2018-02-19 16:53:00</td>\n",
       "      <td>2018-02-01</td>\n",
       "      <td>2018-02-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>touch</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>5</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>7459035603376831527</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>26</td>\n",
       "      <td>2017-07-01</td>\n",
       "      <td>0</td>\n",
       "      <td>2017-07-01 01:54:00</td>\n",
       "      <td>2017-07-01</td>\n",
       "      <td>2017-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-05-20 11:23:00</td>\n",
       "      <td>9</td>\n",
       "      <td>2018-05-20 10:59:00</td>\n",
       "      <td>16174680259334210214</td>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>2018-05-20</td>\n",
       "      <td>1440</td>\n",
       "      <td>2018-03-09 20:05:00</td>\n",
       "      <td>2018-03-01</td>\n",
       "      <td>2018-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>desktop</td>\n",
       "      <td>2018-03-09 20:33:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2018-03-09 20:05:00</td>\n",
       "      <td>16174680259334210214</td>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>2018-03-09</td>\n",
       "      <td>1680</td>\n",
       "      <td>2018-03-09 20:05:00</td>\n",
       "      <td>2018-03-01</td>\n",
       "      <td>2018-03-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    device              end_ts  source_id            start_ts  \\\n",
       "0    touch 2017-12-20 17:38:00          4 2017-12-20 17:20:00   \n",
       "1  desktop 2018-02-19 17:21:00          2 2018-02-19 16:53:00   \n",
       "2    touch 2017-07-01 01:54:00          5 2017-07-01 01:54:00   \n",
       "3  desktop 2018-05-20 11:23:00          9 2018-05-20 10:59:00   \n",
       "4  desktop 2018-03-09 20:33:00          4 2018-03-09 20:05:00   \n",
       "\n",
       "                    uid  session_year  session_month  session_week  \\\n",
       "0  16879256277535980062          2017             12            51   \n",
       "1    104060357244891740          2018              2             8   \n",
       "2   7459035603376831527          2017              7            26   \n",
       "3  16174680259334210214          2018              5            20   \n",
       "4  16174680259334210214          2018              3            10   \n",
       "\n",
       "  session_date  session_duration_sec         first_visit first_visit_month  \\\n",
       "0   2017-12-20                  1080 2017-12-20 17:20:00        2017-12-01   \n",
       "1   2018-02-19                  1680 2018-02-19 16:53:00        2018-02-01   \n",
       "2   2017-07-01                     0 2017-07-01 01:54:00        2017-07-01   \n",
       "3   2018-05-20                  1440 2018-03-09 20:05:00        2018-03-01   \n",
       "4   2018-03-09                  1680 2018-03-09 20:05:00        2018-03-01   \n",
       "\n",
       "  visit_month  \n",
       "0  2017-12-01  \n",
       "1  2018-02-01  \n",
       "2  2017-07-01  \n",
       "3  2018-05-01  \n",
       "4  2018-03-01  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visits['first_visit_month'] = visits['first_visit'].astype('datetime64[M]')\n",
    "visits['visit_month'] = visits['start_ts'].astype('datetime64[M]')\n",
    "visits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "visits['lifetime'] = (visits['visit_month'] - visits['first_visit_month']) / np.timedelta64(1, 'M')\n",
    "visits['lifetime'] = visits['lifetime'].round().astype('int')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first_visit_month</th>\n",
       "      <th>f_uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>13259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2017-07-01</td>\n",
       "      <td>13140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>10181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2017-09-01</td>\n",
       "      <td>16704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>2017-10-01</td>\n",
       "      <td>25977</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   first_visit_month  f_uid\n",
       "0         2017-06-01  13259\n",
       "12        2017-07-01  13140\n",
       "23        2017-08-01  10181\n",
       "33        2017-09-01  16704\n",
       "42        2017-10-01  25977"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_visits = visits.groupby(['first_visit_month', 'lifetime']).agg({'uid': 'nunique'}).reset_index()\n",
    "f_uid = cohort_visits[cohort_visits['lifetime'] == 0][['first_visit_month', 'uid']]\n",
    "f_uid.columns = ['first_visit_month', 'f_uid']\n",
    "f_uid.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "lifetime\n",
       "0     100.000000\n",
       "1       6.516660\n",
       "2       4.633262\n",
       "3       4.275990\n",
       "4       4.059457\n",
       "5       3.944383\n",
       "6       3.695659\n",
       "7       3.750912\n",
       "8       3.546465\n",
       "9       3.515906\n",
       "10      3.406250\n",
       "11      4.495060\n",
       "dtype: float64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cohort_visits = cohort_visits.merge(f_uid)\n",
    "cohort_visits['retention'] = cohort_visits['uid'] / cohort_visits['f_uid']\n",
    "visits_retention_pivot = cohort_visits.pivot_table(index = 'first_visit_month', \n",
    "                                                   columns = 'lifetime', values = 'retention', aggfunc = 'sum')\n",
    "\n",
    "visits_retention_pivot.mean() * 100\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#sns.set(style = 'whitegrid')\n",
    "plt.figure(figsize = (16, 9))\n",
    "plt.title('Когортный анализ')\n",
    "ax = sns.heatmap(visits_retention_pivot, annot=True, fmt='.2%', linewidths=1, linecolor='white', vmin=0, vmax=0.1, cmap='coolwarm')\n",
    "ax.set_yticklabels(visits_retention_pivot.index.date)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Продажи.\n",
    "#### 1. Когда люди начинают покупать?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "first_visit = visits.groupby('uid').agg({'start_ts': 'min'})\\\n",
    "                .rename(columns={'start_ts':'first_visit_date'})\\\n",
    "                .reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "first_order = orders.groupby('uid').agg({'buy_ts':'min'})\\\n",
    "                .rename(columns={'buy_ts':'first_purchase_date'})\\\n",
    "                .reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "buying_time = first_visit.merge(first_order, on='uid', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>first_visit_date</th>\n",
       "      <th>first_purchase_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>313578113262317</td>\n",
       "      <td>2017-09-18 22:49:00</td>\n",
       "      <td>2018-01-03 21:51:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1575281904278712</td>\n",
       "      <td>2017-06-03 10:13:00</td>\n",
       "      <td>2017-06-03 10:13:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2429014661409475</td>\n",
       "      <td>2017-10-11 17:14:00</td>\n",
       "      <td>2017-10-11 18:33:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2464366381792757</td>\n",
       "      <td>2018-01-27 20:10:00</td>\n",
       "      <td>2018-01-28 15:54:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2551852515556206</td>\n",
       "      <td>2017-11-24 10:14:00</td>\n",
       "      <td>2017-11-24 10:14:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                uid    first_visit_date first_purchase_date\n",
       "0   313578113262317 2017-09-18 22:49:00 2018-01-03 21:51:00\n",
       "1  1575281904278712 2017-06-03 10:13:00 2017-06-03 10:13:00\n",
       "2  2429014661409475 2017-10-11 17:14:00 2017-10-11 18:33:00\n",
       "3  2464366381792757 2018-01-27 20:10:00 2018-01-28 15:54:00\n",
       "4  2551852515556206 2017-11-24 10:14:00 2017-11-24 10:14:00"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "buying_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "buying_time['buying_time'] = (buying_time['first_purchase_date'] - buying_time['first_visit_date']).dt.seconds / 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>first_visit_date</th>\n",
       "      <th>first_purchase_date</th>\n",
       "      <th>buying_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>313578113262317</td>\n",
       "      <td>2017-09-18 22:49:00</td>\n",
       "      <td>2018-01-03 21:51:00</td>\n",
       "      <td>1382.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1575281904278712</td>\n",
       "      <td>2017-06-03 10:13:00</td>\n",
       "      <td>2017-06-03 10:13:00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2429014661409475</td>\n",
       "      <td>2017-10-11 17:14:00</td>\n",
       "      <td>2017-10-11 18:33:00</td>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2464366381792757</td>\n",
       "      <td>2018-01-27 20:10:00</td>\n",
       "      <td>2018-01-28 15:54:00</td>\n",
       "      <td>1184.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2551852515556206</td>\n",
       "      <td>2017-11-24 10:14:00</td>\n",
       "      <td>2017-11-24 10:14:00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                uid    first_visit_date first_purchase_date  buying_time\n",
       "0   313578113262317 2017-09-18 22:49:00 2018-01-03 21:51:00       1382.0\n",
       "1  1575281904278712 2017-06-03 10:13:00 2017-06-03 10:13:00          0.0\n",
       "2  2429014661409475 2017-10-11 17:14:00 2017-10-11 18:33:00         79.0\n",
       "3  2464366381792757 2018-01-27 20:10:00 2018-01-28 15:54:00       1184.0\n",
       "4  2551852515556206 2017-11-24 10:14:00 2017-11-24 10:14:00          0.0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "buying_time.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    36523.000000\n",
       "mean       249.164691\n",
       "std        429.742785\n",
       "min          0.000000\n",
       "25%          4.000000\n",
       "50%         16.000000\n",
       "75%        252.000000\n",
       "max       1439.000000\n",
       "Name: buying_time, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "buying_time['buying_time'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Время в минутах от первого визита до покупки')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = buying_time.query('buying_time <20')['buying_time'].hist(bins=50)\n",
    "ax.set_xlabel('Время в минутах')\n",
    "ax.set_ylabel('Частота')\n",
    "ax.set_title('Время в минутах от первого визита до покупки')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_ts</th>\n",
       "      <th>revenue</th>\n",
       "      <th>uid</th>\n",
       "      <th>purchase_year</th>\n",
       "      <th>purchase_month</th>\n",
       "      <th>purchase_week</th>\n",
       "      <th>purchase_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-01 00:10:00</td>\n",
       "      <td>17.00</td>\n",
       "      <td>10329302124590727494</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-01 00:25:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>11627257723692907447</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-01 00:27:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>17903680561304213844</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-01 00:29:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>16109239769442553005</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-01 07:58:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>14200605875248379450</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               buy_ts  revenue                   uid  purchase_year  \\\n",
       "0 2017-06-01 00:10:00    17.00  10329302124590727494           2017   \n",
       "1 2017-06-01 00:25:00     0.55  11627257723692907447           2017   \n",
       "2 2017-06-01 00:27:00     0.37  17903680561304213844           2017   \n",
       "3 2017-06-01 00:29:00     0.55  16109239769442553005           2017   \n",
       "4 2017-06-01 07:58:00     0.37  14200605875248379450           2017   \n",
       "\n",
       "   purchase_month  purchase_week purchase_date  \n",
       "0               6             22    2017-06-01  \n",
       "1               6             22    2017-06-01  \n",
       "2               6             22    2017-06-01  \n",
       "3               6             22    2017-06-01  \n",
       "4               6             22    2017-06-01  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['purchase_year']  = orders['buy_ts'].dt.year\n",
    "orders['purchase_month']  = orders['buy_ts'].dt.month\n",
    "orders['purchase_week']  = orders['buy_ts'].dt.week\n",
    "orders['purchase_date']  = orders['buy_ts'].dt.date\n",
    "\n",
    "orders.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "purchases_per_year = orders.groupby('purchase_year').agg({'uid': 'nunique'}).mean()\n",
    "purchases_per_month = orders.groupby('purchase_month').agg({'uid': 'nunique'}).mean()\n",
    "purchases_per_week = orders.groupby('purchase_week').agg({'uid': 'nunique'}).mean()\n",
    "purchases_per_date = orders.groupby('purchase_date').agg({'uid': 'nunique'}).mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19074\n",
      "3418\n",
      "832\n",
      "127\n"
     ]
    }
   ],
   "source": [
    "print(int(purchases_per_year))\n",
    "print(int(purchases_per_month))\n",
    "print(int(purchases_per_week))\n",
    "print(int(purchases_per_date))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "uid    0.093592\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "purchases_per_customer = (orders.groupby('purchase_month').agg({'uid': 'nunique'}).mean())/orders['uid'].nunique()\n",
    "print(purchases_per_customer)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Какой средний чек?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "revenue    4.956902\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "mean_purchase_by_month = orders.groupby('purchase_month').agg({'revenue': 'mean'})\n",
    "print(mean_purchase_by_month.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = mean_purchase_by_month.plot(kind='bar', figsize=(10, 6))\n",
    "plt.title('Выручка помесячно в среднем')\n",
    "ax.set_xlabel('Месяцы')\n",
    "ax.set_ylabel('Выручка')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Средний чек в месяц - 4,95."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Отобразим на графике, как эти метрики отличаются по устройствам и по рекламным источникам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "revenue_by_source_and_device = visits.merge(orders, on='uid', how='inner').groupby(['source_id', 'device']).agg({'revenue':'sum'})                                \n",
    "\n",
    "#revenue_by_source_and_device.head()\n",
    "#revenue_by_source_and_device.groupby(['Source Id', 'Device']).agg({'Revenue':'sum'})                                \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "revenue_by_source_and_device = revenue_by_source_and_device.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>device</th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>desktop</td>\n",
       "      <td>2.095264e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>touch</td>\n",
       "      <td>2.029358e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>desktop</td>\n",
       "      <td>2.473935e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>touch</td>\n",
       "      <td>1.642544e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>desktop</td>\n",
       "      <td>2.707022e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id   device       revenue\n",
       "0          1  desktop  2.095264e+06\n",
       "1          1    touch  2.029358e+05\n",
       "2          2  desktop  2.473935e+06\n",
       "3          2    touch  1.642544e+05\n",
       "4          3  desktop  2.707022e+05"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "revenue_by_source_and_device.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Ql9m3kvta+huWs8x5wDn1Ci/qdZxmfk0Ne6+zcwVwMSW5etrQ5Ik9UyjRo3i6KOPZuTIkWy//fbss88+AFx++eV85Stf4eyzz+add97hmGOOYcSIEUDlFO/EiRO5884716pv4403ZtasWZxyyim8+eab9O3bl9tuu40TTjiBZ555hlGjRpGZbL311lx77bVd+VXXKzK9ZG19xowZk3PmzKl3N7oVZ/okSe01f/58dt5553p3o1uoNVYRMTczx9Ta39ewSZIklYChT5IkqQQMfZIkSSVg6JMkSSoBQ58kSVIJGPokSZJKwNAnSZK0DmeeeSbnn39+m46ZPn06J5988lrl1157LU888URHda3NOvXdu5IkSe9FRz/7tZ7Pdr322muZMGECu+yyS13ad6ZPkiSpyjnnnMOOO+7IgQceyIIFCwBYtGgR48ePZ/To0eyzzz48+eSTAFxxxRUMGzaMESNGMG7cuLXquvHGG/n4xz/O3XffzfXXX8/UqVMZOXIkixYtYt68eey5554MHz6cI488kldffRWA/fbbj9NOO4299tqLYcOG8eCDD3bI93KmT5IkqTB37lxmzpzJQw89xMqVKxk1ahSjR49mypQpXHzxxQwdOpQHHniAE088kd/85jecddZZ3HzzzQwcOJClS5euUdc111zD9773PW666SYGDBjAYYcdxoQJEzjqqKMAGD58OBdeeCH77rsvZ5xxBt/85jf5wQ9+AMCf//xn7rvvPu6++26+8IUv8Nhjj73n72bokyRJKtxzzz0ceeSRbLrppgAcdthhrFixgvvuu4+JEyeu3u+tt94CYO+99+a4447j05/+NJ/61KdWb7/jjjuYM2cOt9xyC1tsscVa7SxbtoylS5ey7777AjB58uQ16j/22GMBGDduHK+99hpLly6lf//+7+m7GfokSZKqRMQa66tWraJ///7MmzdvrX0vvvhiHnjgAW688UZGjhy5ep8Pf/jDPP300/z+979nzJiar8JtUx9arreH1/RJkiQVxo0bxzXXXMObb77J8uXLueGGG9h0003ZYYcduOKKKwDITB5++GGgcq3fHnvswVlnncVWW23Fc889B8D222/P1VdfzaRJk3j88ccB2HzzzVm+fDkA/fr1Y8CAAdxzzz0A/OxnP1s96wcwa9YsAO6991769etHv3793vN3M/RJkiQVRo0a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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "ax = sns.barplot(x=\"source_id\", y=\"revenue\", hue=\"device\", data=revenue_by_source_and_device)\n",
    "plt.title('Ревеню по источнику и устройству')\n",
    "ax.set_xlabel('Тип источника')\n",
    "ax.set_ylabel('Ревеню')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.Сколько денег приносят? (LTV)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выделим месяцы из дат в таблицах с заказами и расходами."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "orders['order_month'] = orders['buy_ts'].astype('datetime64[M]')\n",
    "costs['month'] = costs['dt'].astype('datetime64[M]') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получим месяц первой покупки каждого покупателя."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                uid first_order_month\n",
      "0   313578113262317        2018-01-01\n",
      "1  1575281904278712        2017-06-01\n",
      "2  2429014661409475        2017-10-01\n",
      "3  2464366381792757        2018-01-01\n",
      "4  2551852515556206        2017-11-01\n"
     ]
    }
   ],
   "source": [
    "first_orders = orders.groupby('uid').agg({'order_month': 'min'}).reset_index()\n",
    "first_orders.columns = ['uid', 'first_order_month']\n",
    "print(first_orders.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посчитаем количество новых покупателей (n_buyers) за каждый месяц."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  first_order_month  n_buyers\n",
      "0        2017-06-01      2023\n",
      "1        2017-07-01      1923\n",
      "2        2017-08-01      1370\n",
      "3        2017-09-01      2581\n",
      "4        2017-10-01      4340\n"
     ]
    }
   ],
   "source": [
    "cohort_sizes = first_orders.groupby('first_order_month').agg({'uid': 'nunique'}).reset_index()\n",
    "cohort_sizes.columns = ['first_order_month', 'n_buyers']\n",
    "print(cohort_sizes.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим когорты. Добавим месяц первой покупки каждого покупателя в таблицу с заказами."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               buy_ts  revenue                   uid  purchase_year  \\\n",
      "0 2017-06-01 00:10:00    17.00  10329302124590727494           2017   \n",
      "1 2017-06-01 00:25:00     0.55  11627257723692907447           2017   \n",
      "2 2017-06-01 00:27:00     0.37  17903680561304213844           2017   \n",
      "3 2017-06-01 00:29:00     0.55  16109239769442553005           2017   \n",
      "4 2017-06-01 07:58:00     0.37  14200605875248379450           2017   \n",
      "\n",
      "   purchase_month  purchase_week purchase_date order_month first_order_month  \n",
      "0               6             22    2017-06-01  2017-06-01        2017-06-01  \n",
      "1               6             22    2017-06-01  2017-06-01        2017-06-01  \n",
      "2               6             22    2017-06-01  2017-06-01        2017-06-01  \n",
      "3               6             22    2017-06-01  2017-06-01        2017-06-01  \n",
      "4               6             22    2017-06-01  2017-06-01        2017-06-01  \n"
     ]
    }
   ],
   "source": [
    "orders_new = pd.merge(orders,first_orders, on='uid')\n",
    "print(orders_new.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сгруппируем таблицу заказов по месяцу первой покупки и месяцу каждого заказа и сложим выручку. Сбросим индекс методом reset_index()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  first_order_month order_month  revenue\n",
      "0        2017-06-01  2017-06-01  9557.49\n",
      "1        2017-06-01  2017-07-01   981.82\n",
      "2        2017-06-01  2017-08-01   885.34\n",
      "3        2017-06-01  2017-09-01  1931.30\n",
      "4        2017-06-01  2017-10-01  2068.58\n"
     ]
    }
   ],
   "source": [
    "cohorts = orders_new.groupby(['first_order_month','order_month']).agg({'revenue': 'sum'}).reset_index()\n",
    "print(cohorts.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим в таблицу cohorts данные о том, сколько людей первый раз совершили покупку в каждый месяц."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  first_order_month  n_buyers order_month  revenue\n",
      "0        2017-06-01      2023  2017-06-01  9557.49\n",
      "1        2017-06-01      2023  2017-07-01   981.82\n",
      "2        2017-06-01      2023  2017-08-01   885.34\n",
      "3        2017-06-01      2023  2017-09-01  1931.30\n",
      "4        2017-06-01      2023  2017-10-01  2068.58\n"
     ]
    }
   ],
   "source": [
    "report = pd.merge(cohort_sizes, cohorts, on='first_order_month')\n",
    "print(report.head()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  first_order_month  n_buyers order_month  revenue  source_id         dt  \\\n",
      "0        2017-06-01      2023  2017-06-01  9557.49          1 2017-06-01   \n",
      "1        2017-06-01      2023  2017-06-01  9557.49          1 2017-06-02   \n",
      "2        2017-06-01      2023  2017-06-01  9557.49          1 2017-06-03   \n",
      "3        2017-06-01      2023  2017-06-01  9557.49          1 2017-06-04   \n",
      "4        2017-06-01      2023  2017-06-01  9557.49          1 2017-06-05   \n",
      "\n",
      "   costs      month  \n",
      "0  75.20 2017-06-01  \n",
      "1  62.25 2017-06-01  \n",
      "2  36.53 2017-06-01  \n",
      "3  55.00 2017-06-01  \n",
      "4  57.08 2017-06-01  \n"
     ]
    }
   ],
   "source": [
    "report = report.merge(costs, left_on='first_order_month', right_on='month')\n",
    "print(report.head()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найдём LTV. Разделим Revenue когорт за каждый месяц на общее число пользователей в каждой когорте. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>age</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>first_order_month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01</th>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-01</th>\n",
       "      <td>6.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-10-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-02-01</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-01</th>\n",
       "      <td>5.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "age                 0  1  2  3  4  5  6  7  8  9  10 11\n",
       "first_order_month                                      \n",
       "2017-06-01         5.0  0  0  1  1  1  1  1  1  1  1  0\n",
       "2017-07-01         6.0  0  1  0  0  0  0  0  0  0  0   \n",
       "2017-08-01         5.0  0  0  0  0  0  0  0  0  0      \n",
       "2017-09-01         6.0  1  1  4  0  1  1  0  0         \n",
       "2017-10-01         5.0  1  0  0  0  0  0  0            \n",
       "2017-11-01         5.0  0  0  0  0  0  0               \n",
       "2017-12-01         5.0  0  1  1  0  0                  \n",
       "2018-01-01         4.0  0  0  0  0                     \n",
       "2018-02-01         4.0  0  0  0                        \n",
       "2018-03-01         5.0  0  0                           \n",
       "2018-04-01         5.0  1                              \n",
       "2018-05-01         5.0                                 "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report['age'] = (report['order_month'] - report['first_order_month']) / np.timedelta64(1, 'M')\n",
    "report['age'] = report['age'].round().astype('int')\n",
    "\n",
    "report['ltv'] = report['revenue'] / report['n_buyers']\n",
    "    \n",
    "output = report.pivot_table(\n",
    "        index='first_order_month', \n",
    "        columns='age', \n",
    "        values='ltv', \n",
    "        aggfunc='mean').round()\n",
    "    \n",
    "output.fillna('') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посчитаем итоговый LTV первой когорты. Сложим их LTV по месяцам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.0\n"
     ]
    }
   ],
   "source": [
    "ltv_201706 = output.loc['2017-06-01'].sum()\n",
    "print(ltv_201706) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В среднем каждый покупатель из первой когорты принес по 13 рублей прибыли за 12 месяцев «жизни»."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Маркетинг\n",
    "#### 1. Сколько денег потратили? Всего / на каждый источник / по времени."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>dt</th>\n",
       "      <th>costs</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>75.20</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-02</td>\n",
       "      <td>62.25</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-03</td>\n",
       "      <td>36.53</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-04</td>\n",
       "      <td>55.00</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-05</td>\n",
       "      <td>57.08</td>\n",
       "      <td>2017-06-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id         dt  costs      month\n",
       "0          1 2017-06-01  75.20 2017-06-01\n",
       "1          1 2017-06-02  62.25 2017-06-01\n",
       "2          1 2017-06-03  36.53 2017-06-01\n",
       "3          1 2017-06-04  55.00 2017-06-01\n",
       "4          1 2017-06-05  57.08 2017-06-01"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "329131.62"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs['costs'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Всего потратили 329 тыс руб. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "costs_by_source = costs.groupby('source_id')['costs'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "source_id\n",
       "3     141321.63\n",
       "4      61073.60\n",
       "5      51757.10\n",
       "2      42806.04\n",
       "1      20833.27\n",
       "10      5822.49\n",
       "9       5517.49\n",
       "Name: costs, dtype: float64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs_by_source.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наибольшие расходы были на источник №3, наименьшие - на источник №9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "costs['costs_month'] = costs['month'].astype('datetime64[M]').dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "costs_by_month = costs.groupby('costs_month')['costs'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "costs_month\n",
       "2017-12-01    38315.35\n",
       "2017-11-01    37907.88\n",
       "2017-10-01    36322.88\n",
       "2018-01-01    33518.52\n",
       "2018-02-01    32723.03\n",
       "2018-03-01    30415.27\n",
       "2017-09-01    24368.91\n",
       "2018-04-01    22289.38\n",
       "2018-05-01    22224.27\n",
       "2017-07-01    18240.59\n",
       "2017-06-01    18015.00\n",
       "2017-08-01    14790.54\n",
       "Name: costs, dtype: float64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs_by_month.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наибольшие расходы были в Декабре, наименьшие - в Августе."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "ax = sns.barplot(x='costs_month', y='costs', data=costs)\n",
    "ax.tick_params(axis='x', rotation=45)\n",
    "plt.title('Расходы помесячно')\n",
    "ax.set_xlabel('Месяцы')\n",
    "ax.set_ylabel('Расходы')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Сколько стоило привлечение одного покупателя из каждого источника?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>costs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>20833.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>42806.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>141321.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>61073.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>51757.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9</td>\n",
       "      <td>5517.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10</td>\n",
       "      <td>5822.49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id      costs\n",
       "0          1   20833.27\n",
       "1          2   42806.04\n",
       "2          3  141321.63\n",
       "3          4   61073.60\n",
       "4          5   51757.10\n",
       "5          9    5517.49\n",
       "6         10    5822.49"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs_by_source = costs.groupby('source_id').agg({'costs':'sum'})\n",
    "costs_by_source.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buy_ts</th>\n",
       "      <th>revenue</th>\n",
       "      <th>uid</th>\n",
       "      <th>purchase_year</th>\n",
       "      <th>purchase_month</th>\n",
       "      <th>purchase_week</th>\n",
       "      <th>purchase_date</th>\n",
       "      <th>order_month</th>\n",
       "      <th>first_order_month</th>\n",
       "      <th>device</th>\n",
       "      <th>...</th>\n",
       "      <th>start_ts</th>\n",
       "      <th>session_year</th>\n",
       "      <th>session_month</th>\n",
       "      <th>session_week</th>\n",
       "      <th>session_date</th>\n",
       "      <th>session_duration_sec</th>\n",
       "      <th>first_visit</th>\n",
       "      <th>first_visit_month</th>\n",
       "      <th>visit_month</th>\n",
       "      <th>lifetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-06-01 00:10:00</td>\n",
       "      <td>17.00</td>\n",
       "      <td>10329302124590727494</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>desktop</td>\n",
       "      <td>...</td>\n",
       "      <td>2017-06-01 00:09:00</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>120</td>\n",
       "      <td>2017-06-01 00:09:00</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-06-01 00:25:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>11627257723692907447</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>desktop</td>\n",
       "      <td>...</td>\n",
       "      <td>2017-06-01 00:14:00</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>660</td>\n",
       "      <td>2017-06-01 00:14:00</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-06-01 00:27:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>17903680561304213844</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>desktop</td>\n",
       "      <td>...</td>\n",
       "      <td>2017-06-01 00:25:00</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>540</td>\n",
       "      <td>2017-06-01 00:25:00</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-01 00:29:00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>16109239769442553005</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>desktop</td>\n",
       "      <td>...</td>\n",
       "      <td>2017-06-01 00:14:00</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>1140</td>\n",
       "      <td>2017-06-01 00:14:00</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-06-01 07:58:00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>14200605875248379450</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>desktop</td>\n",
       "      <td>...</td>\n",
       "      <td>2017-06-01 07:31:00</td>\n",
       "      <td>2017</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>1680</td>\n",
       "      <td>2017-06-01 07:31:00</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>2017-06-01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               buy_ts  revenue                   uid  purchase_year  \\\n",
       "0 2017-06-01 00:10:00    17.00  10329302124590727494           2017   \n",
       "1 2017-06-01 00:25:00     0.55  11627257723692907447           2017   \n",
       "2 2017-06-01 00:27:00     0.37  17903680561304213844           2017   \n",
       "3 2017-06-01 00:29:00     0.55  16109239769442553005           2017   \n",
       "4 2017-06-01 07:58:00     0.37  14200605875248379450           2017   \n",
       "\n",
       "   purchase_month  purchase_week purchase_date order_month first_order_month  \\\n",
       "0               6             22    2017-06-01  2017-06-01        2017-06-01   \n",
       "1               6             22    2017-06-01  2017-06-01        2017-06-01   \n",
       "2               6             22    2017-06-01  2017-06-01        2017-06-01   \n",
       "3               6             22    2017-06-01  2017-06-01        2017-06-01   \n",
       "4               6             22    2017-06-01  2017-06-01        2017-06-01   \n",
       "\n",
       "    device  ...            start_ts  session_year session_month  session_week  \\\n",
       "0  desktop  ... 2017-06-01 00:09:00          2017             6            22   \n",
       "1  desktop  ... 2017-06-01 00:14:00          2017             6            22   \n",
       "2  desktop  ... 2017-06-01 00:25:00          2017             6            22   \n",
       "3  desktop  ... 2017-06-01 00:14:00          2017             6            22   \n",
       "4  desktop  ... 2017-06-01 07:31:00          2017             6            22   \n",
       "\n",
       "   session_date  session_duration_sec         first_visit  first_visit_month  \\\n",
       "0    2017-06-01                   120 2017-06-01 00:09:00         2017-06-01   \n",
       "1    2017-06-01                   660 2017-06-01 00:14:00         2017-06-01   \n",
       "2    2017-06-01                   540 2017-06-01 00:25:00         2017-06-01   \n",
       "3    2017-06-01                  1140 2017-06-01 00:14:00         2017-06-01   \n",
       "4    2017-06-01                  1680 2017-06-01 07:31:00         2017-06-01   \n",
       "\n",
       "  visit_month lifetime  \n",
       "0  2017-06-01        0  \n",
       "1  2017-06-01        0  \n",
       "2  2017-06-01        0  \n",
       "3  2017-06-01        0  \n",
       "4  2017-06-01        0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders_by_source = orders_new.merge(visits, on='uid', how='inner')\n",
    "orders_by_source.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>7138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>7305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>13846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>14253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>10156</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id    uid\n",
       "0          1   7138\n",
       "1          2   7305\n",
       "2          3  13846\n",
       "3          4  14253\n",
       "4          5  10156"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customers_by_source = orders_by_source.groupby('source_id').agg({'uid': 'nunique'}).reset_index()\n",
    "customers_by_source = customers_by_source.rename(columns={'source_id':'source_id'})\n",
    "customers_by_source.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>costs</th>\n",
       "      <th>uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>20833.27</td>\n",
       "      <td>7138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>42806.04</td>\n",
       "      <td>7305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>141321.63</td>\n",
       "      <td>13846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>61073.60</td>\n",
       "      <td>14253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>51757.10</td>\n",
       "      <td>10156</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id      costs    uid\n",
       "0          1   20833.27   7138\n",
       "1          2   42806.04   7305\n",
       "2          3  141321.63  13846\n",
       "3          4   61073.60  14253\n",
       "4          5   51757.10  10156"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "costs_by_source = costs_by_source.merge(customers_by_source, on='source_id')\n",
    "costs_by_source.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "costs_by_source['cac'] = costs_by_source['costs']/costs_by_source['uid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>costs</th>\n",
       "      <th>uid</th>\n",
       "      <th>cac</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>141321.63</td>\n",
       "      <td>13846</td>\n",
       "      <td>10.206676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>42806.04</td>\n",
       "      <td>7305</td>\n",
       "      <td>5.859828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>51757.10</td>\n",
       "      <td>10156</td>\n",
       "      <td>5.096209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>61073.60</td>\n",
       "      <td>14253</td>\n",
       "      <td>4.284965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10</td>\n",
       "      <td>5822.49</td>\n",
       "      <td>1773</td>\n",
       "      <td>3.283976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>20833.27</td>\n",
       "      <td>7138</td>\n",
       "      <td>2.918642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9</td>\n",
       "      <td>5517.49</td>\n",
       "      <td>2793</td>\n",
       "      <td>1.975471</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id      costs    uid        cac\n",
       "2          3  141321.63  13846  10.206676\n",
       "1          2   42806.04   7305   5.859828\n",
       "4          5   51757.10  10156   5.096209\n",
       "3          4   61073.60  14253   4.284965\n",
       "6         10    5822.49   1773   3.283976\n",
       "0          1   20833.27   7138   2.918642\n",
       "5          9    5517.49   2793   1.975471"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(costs_by_source.sort_values('cac', ascending=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "ax = sns.barplot(x='source_id', y='cac', data=costs_by_source)\n",
    "plt.title('CAC по источнику')\n",
    "ax.set_xlabel('Тип источника')\n",
    "ax.set_ylabel('Стоимость привлечения')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. На сколько окупились расходы? (ROI)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводим пользователей, впервые посетивших сайт, в разрезе рекламных источников, откуда они пришли. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>16879256277535980062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>104060357244891740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>7459035603376831527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>16174680259334210214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>9969694820036681168</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id                   uid\n",
       "0          4  16879256277535980062\n",
       "1          2    104060357244891740\n",
       "2          5   7459035603376831527\n",
       "4          4  16174680259334210214\n",
       "5          3   9969694820036681168"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visits_by_source = visits.query('start_ts==first_visit')[['source_id','uid']]\n",
    "visits_by_source.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Соединяем этих покупателей с таблицей Orders и находим кол-во покупателей в разрезе источников, совершивших заказы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>uid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>10473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>10296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6931</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id    uid\n",
       "0          1   2899\n",
       "1          2   3506\n",
       "2          3  10473\n",
       "3          4  10296\n",
       "4          5   6931"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customers = orders.merge(visits_by_source, on='uid', how='inner')\n",
    "customers = customers.groupby('source_id').agg({'uid':'nunique'}).reset_index()\n",
    "customers.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Из той же таблицы выводим Revenue в разрезе источников."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>31090.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>46923.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>54511.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>56696.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>52624.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id   revenue\n",
       "0          1  31090.55\n",
       "1          2  46923.61\n",
       "2          3  54511.24\n",
       "3          4  56696.83\n",
       "4          5  52624.02"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "revenue_by_source = orders.merge(visits_by_source, on='uid', how='inner')\n",
    "revenue_by_source = revenue_by_source.groupby('source_id').agg({'revenue':'sum'}).reset_index()\n",
    "revenue_by_source.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Присоеднияем к таблице выше затраты по источникам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>revenue</th>\n",
       "      <th>costs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>31090.55</td>\n",
       "      <td>20833.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>46923.61</td>\n",
       "      <td>42806.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>54511.24</td>\n",
       "      <td>141321.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>56696.83</td>\n",
       "      <td>61073.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>52624.02</td>\n",
       "      <td>51757.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id   revenue      costs\n",
       "0          1  31090.55   20833.27\n",
       "1          2  46923.61   42806.04\n",
       "2          3  54511.24  141321.63\n",
       "3          4  56696.83   61073.60\n",
       "4          5  52624.02   51757.10"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roi = revenue_by_source.merge(costs_by_source[['source_id', 'costs']], on='source_id')\n",
    "roi.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Находим ROI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_id</th>\n",
       "      <th>revenue</th>\n",
       "      <th>costs</th>\n",
       "      <th>roi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>31090.55</td>\n",
       "      <td>20833.27</td>\n",
       "      <td>0.492351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>46923.61</td>\n",
       "      <td>42806.04</td>\n",
       "      <td>0.096191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>54511.24</td>\n",
       "      <td>141321.63</td>\n",
       "      <td>-0.614275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>56696.83</td>\n",
       "      <td>61073.60</td>\n",
       "      <td>-0.071664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>52624.02</td>\n",
       "      <td>51757.10</td>\n",
       "      <td>0.016750</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   source_id   revenue      costs       roi\n",
       "0          1  31090.55   20833.27  0.492351\n",
       "1          2  46923.61   42806.04  0.096191\n",
       "2          3  54511.24  141321.63 -0.614275\n",
       "3          4  56696.83   61073.60 -0.071664\n",
       "4          5  52624.02   51757.10  0.016750"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roi['roi'] = (roi['revenue'] - roi['costs']) / roi['costs']\n",
    "roi.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наибольший возврат на маркетинговые инвестиции приносит 1-й источник, наименьший возврат - 3-й источник."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Общий вывод. \n",
    "Мы провели анализ бизнес-показателей Яндекс Афиши, попытались помочь маркетологам оптимизировать маркетинговые затраты.  \n",
    "\n",
    "Загрузили данные из файлов и проверили их на корректность. Пропусков в данных мы не обнаружили, но изменили тип показателей времени на datetime.  \n",
    "\n",
    "Далее мы построили отчеты и посчитали метрики.  \n",
    "Оказалось, что продуктом пользуются в среднем 907 пользователей в день, 5825 пользователей в неделю, 23228 пользователей в год.  \n",
    "В день проводится в среднем 987 сессий. Одна сессия длится в среднем 10,7 мин.  \n",
    "\n",
    "Retention Rate очень низкий. В первый месяц он убывает по когортам с течением времени. Если для когорты пользователей, пришедших с 01.06 Retention Rate в первую неделю составляет 7,87%, то для пользователей, пришедших 01.04 — уже 4,84%. Так, за 9 месяцев коэффициент удержания упал на 38б,5%. Это говорит о том, что с каждой новой когортой поведение покупателей меняется.  \n",
    "\n",
    "Наибольшая продолжительность от первого визита до покупки - 1 минута (в данных присутствуют выбросы, так как mean данного показателя = 249 мин). Средние покупки в день - 127, в неделю - 832, в месяц - 3418, в год - 19074.  На одного покупателя приходится в месяц 0,09 покупок. Средний чек в месяц - 4,95. Наибольший доход приносит тип девайса - desktop.  \n",
    "Мы определили, что в среднем каждый покупатель из первой когорты принес по 13 рублей прибыли.  \n",
    "\n",
    "Всего на маркетинг потратили 329 тыс руб. Наибольшие расходы были на источник №3, наименьшие - на источник №9. Наибольшие расходы были в Декабре, наименьшие - в Августе. Максимальная стоимость привлечения покупателя у 3-го источника - 10 руб., минимальная стоимость у 9 источника - 2 руб.  \n",
    "Наибольший возврат на маркетинговые инвестиции приносит 1-й источник, наименьший возврат - 3-й источник. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
